---
id: index.base
title: 适配上云API代码
sidebar_label: 开发者中心
sidebar_position: 2
description: SBIM 系统设备适配上云API的完整开发指南
---
# 基础配置

## Docker 安装

- 安装教程：[https://docs.docker.com/engine/install/ubuntu/](https://docs.docker.com/engine/install/ubuntu/)

## Docker Compose 安装

- 安装教程：[https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/)

## 源码包下载

- 点击下载 [源码包](https://terra-sz-hc1pro-cloudapi.oss-cn-shenzhen.aliyuncs.com/c0af9fe0d7eb4f35a8fe5b695e4d0b96/docker/cloud_api_sample_docker.zip)

## 解压文件

将 cloud_api_sample_docker_1.0.0.zip 文件解压后目录结构如下：

![image-20220321112952651](https://stag-terra-1-g.djicdn.com/7774da665e07453698314cc27c523096/admin/doc/195959b3-f8e1-4f3d-9d9b-d90ece297e15.png)

- data
  存放demo服务运行的用户数据

- docker-compose.yml
  docker-compose的运行配置文件

- docs
  存放各类文档，包括API文档

- source
  存放源代码，各类镜像的源文件

- cloud_api_sample_docker_v1.0.0.tar
  所有环境的 docker 镜像

- README.md

- update_backend.sh

  构建后端镜像文件

- update_front.sh

  构建前端镜像文件


## 启动相关的基础模块
- 修改`docker-compose.yml`文件,改为以下文件:
```yaml
    version: "3"
    services:
      emqx:
        image: emqx:4.4
        ports:
          - "18083:18083"
          - "1883:1883"
          - "8083:8083"
          - "8883:8883"
          - "8084:8084"
        environment:
          - EMQX_ALLOW_ANONYMOUS=true
        hostname: emqx-broker
        networks:
          - cloud_service_bridge
      mysql:
        image: mysql:latest
        networks:
          - cloud_service_bridge
        ports:
          - "3306:3306"
        volumes:
                # - /etc/group:/etc/group:ro
                # - /etc/passwd:/etc/passwd:ro
          - /etc/localtime:/etc/localtime
          - ./data/mysql:/var/lib/mysql
        environment:
          - MYSQL_ROOT_PASSWORD=root
        hostname: cloud_api_sample_mysql
      redis:
        image: redis:6.2
        restart: "always"
        hostname: cloud_api_sample_redis
        ports:
          - "6379:6379"
        networks:
          - cloud_service_bridge
        command:
          redis-server
      minio:
        image: minio/minio:latest
        container_name: minio
        environment:
          - MINIO_ROOT_USER=minioadmin
          - MINIO_ROOT_PASSWORD=minioadmin
          - TZ=Asia/Shanghai
        ports:
          - "9000:9000"
          - "9001:9001"
        volumes:
          - ./data/minio:/data
          - ./data/minio/logs:/var/log/minio
          - /etc/localtime:/etc/localtime
        command: server /data --console-address ":9001"
        restart: always
    
      srs:
          image: ossrs/srs
          container_name: sd.srsdemo
          hostname: srsdemo
          ports:
            - "1935:1935"
            - "1985:1985"
            - "8080:8080"
            - "8000:8000"
            - "8000:8000/udp"
          environment:
            - CANDIDATE=192.168.99.159
          command: objs/srs -c conf/rtmp2rtc.conf
          restart: always
    networks:
      cloud_service_bridge:
        driver: bridge
        ipam:
          config:
            - subnet: 192.168.6.0/24
  ```
  
- 执行`sudo docker compose up -d`命令行
  ```shell
  sudo docker compose up -d
  ```
- 可以获取到`sudo docker ps`当前运行的镜像
  ```shell
  sudo docker ps
  ```
  可以获取到以下的数据
  ```text
    CONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS                                                                                                                                                                                                                                                                     NAMES
    58004f4e9373   redis:6.2      "docker-entrypoint.s…"   6 minutes ago   Up 5 minutes   0.0.0.0:6379->6379/tcp, [::]:6379->6379/tcp                                                                                                                                                                                                                               cloud_api_sample-redis-1
    75bfac84fd44   emqx:4.4       "/usr/bin/docker-ent…"   6 minutes ago   Up 5 minutes   4369-4370/tcp, 5369/tcp, 6369-6370/tcp, 0.0.0.0:1883->1883/tcp, [::]:1883->1883/tcp, 0.0.0.0:8083-8084->8083-8084/tcp, [::]:8083-8084->8083-8084/tcp, 8081/tcp, 0.0.0.0:8883->8883/tcp, [::]:8883->8883/tcp, 0.0.0.0:18083->18083/tcp, [::]:18083->18083/tcp, 11883/tcp   cloud_api_sample-emqx-1
    0f7d52ed7e75   mysql:latest   "docker-entrypoint.s…"   6 minutes ago   Up 5 minutes   0.0.0.0:3306->3306/tcp, [::]:3306->3306/tcp, 33060/tcp                                                                                                                                                                                                                    cloud_api_sample-mysql-1
    ```

## 导入sql数据库

- 找到`cloud_sample.sql`数据库文件
  ```text
  root@NanoPC-T6:~/dji_cloud_docker/cloud_api_sample/source/backend_service/sql# ls
  cloud_sample.sql
  ```
- 执行导入数据进入容器的mysql客户端
    ```shell
    sudo docker exec -i cloud_api_sample-mysql-1 mysql -uroot -proot < cloud_sample.sql
    ```
- 验证是否创建`cloud_sample`这个数据库
  ```shell
  sudo docker exec -it cloud_api_sample-mysql-1   mysql -uroot -proot -e "SHOW DATABASES LIKE 'cloud_sample';"
  ```
  可以获取到下面信息
  ```text
  mysql: [Warning] Using a password on the command line interface can be insecure.
  +-------------------------+
  | Database (cloud_sample) |
  +-------------------------+
  | cloud_sample            |
  +-------------------------+
  ```

# 源码修改

整个上云 API Demo 例程采用前后端分离的设计，前端采用的是 TS+Vue3 框架，后端采用的是 JAVA 语言（必须**11**及以上的版本，否则后端代码无法编译），Spring Boot 框架。使用该例程，用户需要预先学习熟悉以下知识：
## 上云API Demo介绍
**前端**

1. TypeScript、HTML、CSS 编程语言。
2. Vue3.x 框架、Node.js npm 包管理。
3. Ant Design Vue V2 组件库。
4. HTTP/Websocket 通信。
5. Linux 环境通过 Nginx 部署前端应用服务。
6. 高德地图开放 API 使用。

**后端**

1. Java
2. Spring Boot
3. MQTT
4. MySQL
5. WebSocket
6. Redis

**环境与版本**

1. Linux 云服务器，Ubuntu16.04 系统
2. Java 版本：openJDK 必须11及以上
3. MySQL 版本：8.0.26
4. EMQX 版本：4.4.0
5. Redis 版本：6.2
6. Nginx 版本：1.20.2
7. Vue 版本：3.0.5
8. Node.js 版本：17.8

**Demo 源码下载**

1. DEMO 前端源码：[下载地址](https://github.com/dji-sdk/Cloud-API-Demo-Web)
2. DEMO 后端源码：[下载地址](https://github.com/dji-sdk/DJI-Cloud-API-Demo)

## 获取源码

- 获取DJI-Cloud-API-Demo源码
  ```shell
  git clone https://github.com/dji-sdk/DJI-Cloud-API-Demo.git
  ```
  或者
  ```shell
  git clone git@github.com:dji-sdk/DJI-Cloud-API-Demo.git
  ```
- 获取Cloud-API-Demo-Web源码
  ```shell
  git clone https://github.com/dji-sdk/Cloud-API-Demo-Web.git
  ```
  或者
  ```shell
  git clone git@github.com:dji-sdk/Cloud-API-Demo-Web.git
  ```
  
## 
## SBDock设备支持扩展

### 提交说明

本次提交（commit: dc84866）主要为DJI Cloud API Demo项目添加了SBDock（各种机场型号）的完整支持，包括设备枚举、类型定义、数据库更新等多个方面的修改。

### 修改原因

1. **设备支持扩展需求**：随着DJI机场产品线的扩展，需要支持更多的机场型号，包括S22M300、S2201、S2301、S24M350等多种SBDock设备。

2. **设备识别准确性**：原有的设备枚举存在一些不准确的映射关系，特别是M30/M30T系列设备的类型定义需要修正。

3. **数据库同步**：需要将新的设备类型信息同步到数据库中，确保系统能够正确识别和管理这些设备。

4. **系统完整性**：为了保证Cloud API Demo的完整性和实用性，需要支持最新的DJI设备产品线。

### 主要修改内容

#### 1. 设备枚举扩展 (DeviceEnum.java)
- **新增M4系列无人机支持**：
  - M4D (type: 100, sub_type: 0)
  - M4TD (type: 100, sub_type: 1) 
  - M4E (type: 99, sub_type: 0)
  - M4T (type: 99, sub_type: 1)

- **新增相机设备支持**：
  - PAYLOAD (type: 31)
  - H30 (type: 82)
  - H30T (type: 83)
  - L2 (type: 84)

- **修正设备类型映射**：
  - M30: 从 `M30_OR_M3T_CAMERA` 修正为 `M30`
  - M30T: 从 `M30_OR_M3T_CAMERA` 修正为 `M30T`
  - M3T_CAMERA: 从 `M30_OR_M3T_CAMERA` 修正为 `M3T_CAMERA`

#### 2. 设备类型定义扩展 (DeviceTypeEnum.java)
- 新增M4系列设备类型定义
- 新增H30系列相机类型定义
- 新增L2激光雷达类型定义
- 修正M30/M30T系列的类型定义

#### 3. 机场设备支持 (GatewayTypeEnum.java)
- **新增7种SBDock机场型号**：
  - S22M300: M300机场 (type: 88097)
  - S2201: 机场2 (type: 88098)
  - S2301: M3机场 (type: 88099)
  - S24M350: M350机场-24 (type: 88100)
  - S24M350S: M350换电机场-24 (type: 88101)
  - S24M3: M3机场-24 (type: 88102)
  - S24M4: M4机场-24 (type: 88103)


#### 4. 版本信息更新
- **DroneThingVersionEnum.java**: 新增M4系列无人机版本支持
- **GatewayThingVersion.java**: 新增各种机场设备的版本信息
- **DockLiveErrorStatus.java**: 扩展机场设备的错误状态定义

#### 5. 数据库更新脚本
- **type.json**: 包含所有设备类型的完整定义，用于数据同步
- **update_database.py**: Python脚本，用于自动更新数据库中的设备字典
- **update_device_dictionary.sql**: SQL脚本，直接更新manage_device_dictionary表

#### 6. 系统配置优化
- **application.yml**: 优化了配置文件结构，简化了部分配置项
- **SDKDeviceService.java**: 新增设备服务处理逻辑
- **StateRouter.java**: 扩展状态路由处理

### 技术实现原理

#### 设备识别机制
DJI Cloud API使用三元组(domain, type, sub_type)来唯一标识设备：
- **domain**: 设备域，0=无人机，1=载荷，2=遥控器，3=机场
- **type**: 设备类型，每种设备有唯一的类型编号
- **sub_type**: 设备子类型，用于区分同一类型下的不同变体

#### 机场设备扩展原理
```java
// 原有机场支持
DOCK(DeviceEnum.DOCK),           // 通用机场
DOCK2(DeviceEnum.DOCK2),         // 机场2

// 新增具体机场型号支持
S22M300(DeviceEnum.S22M300),     // M300专用机场
S2301(DeviceEnum.S2301),         // M3系列机场
S24M350(DeviceEnum.S24M350),     // M350机场
// ... 其他型号
```

#### 数据库同步机制
1. **type.json**: 作为设备类型的标准定义文件
2. **update_database.py**: 读取JSON文件并更新数据库
3. **update_device_dictionary.sql**: 提供直接的SQL更新方案

### 使用方法

#### 1. 数据库更新
```bash
# 方法1: 使用Python脚本
python3 update_database.py

# 方法2: 直接执行SQL
mysql -u root -p cloud_sample < update_device_dictionary.sql
```

#### 2. 设备识别示例
```java
// 识别M4E无人机
DeviceEnum device = DeviceEnum.M4E;
// domain=0, type=99, sub_type=0

// 识别S24M350机场
DeviceEnum dock = DeviceEnum.S24M350;
// domain=3, type=88100, sub_type=0
```

### 影响范围

1. **设备管理**: 系统现在可以正确识别和管理更多类型的DJI设备
2. **数据库结构**: manage_device_dictionary表包含了最新的设备信息
3. **API兼容性**: 保持了向后兼容，不影响现有功能
4. **扩展性**: 为未来新设备的支持提供了标准化的扩展方式

### 注意事项

1. **数据库备份**: 在执行数据库更新前，建议先备份现有数据
2. **版本兼容**: 确保使用的DJI SDK版本支持这些新设备
3. **配置更新**: 部署时需要同步更新相关配置文件
4. **测试验证**: 建议在测试环境中先验证新设备的识别和功能

### 相关文件清单

本次提交涉及的主要文件：

```
cloud-sdk/src/main/java/com/dji/sdk/cloudapi/device/
├── DeviceEnum.java                    # 设备枚举定义
├── DeviceTypeEnum.java               # 设备类型枚举
└── DockLiveErrorStatus.java          # 机场错误状态

cloud-sdk/src/main/java/com/dji/sdk/config/version/
├── DroneThingVersionEnum.java        # 无人机版本枚举
├── GatewayThingVersion.java          # 网关版本信息
└── GatewayTypeEnum.java              # 网关类型枚举

sample/src/main/java/com/dji/sample/manage/service/impl/
└── SDKDeviceService.java             # 设备服务实现

数据库相关文件：
├── type.json                         # 设备类型定义
├── update_database.py                # 数据库更新脚本
└── update_device_dictionary.sql      # SQL更新脚本
```

